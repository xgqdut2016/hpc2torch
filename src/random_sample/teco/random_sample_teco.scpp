#include "teco/common_teco.h"

template<typename T>
void topkKernel(const void *probs, void *index, void *value, int topk, int voc, tecodnnStatus_t status, tecodnnHandle_t handle, sdaaStream_t stream) {
    tecodnnTensorDescriptor_t input_desc_teco, value_desc_teco, index_desc_teco;
    tecodnnCreateTensorDescriptor(&input_desc_teco);
    tecodnnCreateTensorDescriptor(&value_desc_teco);
    tecodnnCreateTensorDescriptor(&index_desc_teco);

    int32_t probsDims[2] = {1, voc}, probsStrides[2] = {voc, 1};
    int32_t resultDims[2] = {1, topk}, resultStrides[2] = {topk, 1};
    if constexpr (sizeof(T) == 2) {
        tecodnnSetTensorNdDescriptor(input_desc_teco, TECODNN_DATA_HALF, 2, probsDims, probsStrides);
        tecodnnSetTensorNdDescriptor(value_desc_teco, TECODNN_DATA_HALF, 2, resultDims, resultStrides);
    } else if constexpr (sizeof(T) == 4) {
        tecodnnSetTensorNdDescriptor(input_desc_teco, TECODNN_DATA_FLOAT, 2, probsDims, probsStrides);
        tecodnnSetTensorNdDescriptor(value_desc_teco, TECODNN_DATA_FLOAT, 2, resultDims, resultStrides);
    }

    tecodnnSetTensorNdDescriptor(index_desc_teco, TECODNN_DATA_INT64, 2, resultDims, resultStrides);

    size_t workSpaceSizeInBytes;
    int axis = 1;
    bool largest = true;
    bool sorted = true;
    tecodnnGetTopkExWorkspaceSize(handle, axis, topk, largest, sorted, input_desc_teco, value_desc_teco,
                                  index_desc_teco, &workSpaceSizeInBytes);
    void *compute_workspace;
    sdaaMalloc((void **) &compute_workspace, workSpaceSizeInBytes);

    status = tecodnnTopkEx(handle, axis, topk, largest, sorted, input_desc_teco, probs, value_desc_teco, value,
                           index_desc_teco, index, compute_workspace, workSpaceSizeInBytes);
    sdaaStreamSynchronize(stream);
    if(workSpaceSizeInBytes > 0){
        sdaaFree(compute_workspace);
    }
    
    tecodnnDestroyTensorDescriptor(input_desc_teco);
    tecodnnDestroyTensorDescriptor(value_desc_teco);
    tecodnnDestroyTensorDescriptor(index_desc_teco);
    if (status != TECODNN_STATUS_SUCCESS) {
        printf("topk %s\n", tecodnnGetErrorString(status));
    }
}
template<typename T>
void softmaxKernel(const void *probs, void *destination, int voc, tecodnnStatus_t status, tecodnnHandle_t handle, sdaaStream_t stream) {
    tecodnnTensorDescriptor_t x_desc_teco, y_desc_teco;
    tecodnnCreateTensorDescriptor(&x_desc_teco);
    tecodnnCreateTensorDescriptor(&y_desc_teco);

    tecodnnSoftmaxAlgorithm_t algo = TECODNN_SOFTMAX_ACCURATE;
    tecodnnSoftmaxMode_t mode = TECODNN_SOFTMAX_MODE_INSTANCE;
    float alpha = 1.0f, beta = 0.0f;
    if constexpr (sizeof(T) == 2) {
        tecodnnSetTensor4dDescriptor(x_desc_teco, TECODNN_TENSOR_NHWC, TECODNN_DATA_HALF, 1, 1, 1, voc);
        tecodnnSetTensor4dDescriptor(y_desc_teco, TECODNN_TENSOR_NHWC, TECODNN_DATA_HALF, 1, 1, 1, voc);
    } else if constexpr (sizeof(T) == 4) {
        tecodnnSetTensor4dDescriptor(x_desc_teco, TECODNN_TENSOR_NHWC, TECODNN_DATA_FLOAT, 1, 1, 1, voc);
        tecodnnSetTensor4dDescriptor(y_desc_teco, TECODNN_TENSOR_NHWC, TECODNN_DATA_FLOAT, 1, 1, 1, voc);
    }

    status = tecodnnSoftmaxForward(handle, algo, mode, &alpha, x_desc_teco, probs, &beta, y_desc_teco, destination);
    sdaaStreamSynchronize(stream);
    tecodnnDestroyTensorDescriptor(x_desc_teco);
    tecodnnDestroyTensorDescriptor(y_desc_teco);
    if (status != TECODNN_STATUS_SUCCESS) {
        printf("softmax %s\n", tecodnnGetErrorString(status));
    }
}

template<typename T>
__global__ void memKernel(T *destination, T *value, int64_t *index, int topk){
    int remain = topk % threadDim;
    int step_easy = (topk - remain) / threadDim;
    int step_hard = step_easy + 1;
    int step = (threadIdx < remain ? step_hard : step_easy);
    int ind_start = (threadIdx < remain ? threadIdx * step_hard : remain * step_hard + (threadIdx - remain) * step_easy);
    
    for(int i = ind_start; i < ind_start + step; i++){
        value[i] = destination[index[i]];
    }
}

template<typename T>
void cumSumKernel(void *value, void *scan_value, int topk_, tecodnnStatus_t status, tecodnnHandle_t handle, sdaaStream_t stream) {
    tecodnnTensorDescriptor_t a_desc_teco, c_desc_teco;
    tecodnnCreateTensorDescriptor(&a_desc_teco);
    tecodnnCreateTensorDescriptor(&c_desc_teco);

    if constexpr (sizeof(T) == 2) {
        tecodnnSetTensor4dDescriptor(a_desc_teco, TECODNN_TENSOR_NCHW, TECODNN_DATA_HALF, 1, 1, 1, topk_);
        tecodnnSetTensor4dDescriptor(c_desc_teco, TECODNN_TENSOR_NCHW, TECODNN_DATA_HALF, 1, 1, 1, topk_);
    } else if constexpr (sizeof(T) == 4) {
        tecodnnSetTensor4dDescriptor(a_desc_teco, TECODNN_TENSOR_NCHW, TECODNN_DATA_FLOAT, 1, 1, 1, topk_);
        tecodnnSetTensor4dDescriptor(c_desc_teco, TECODNN_TENSOR_NCHW, TECODNN_DATA_FLOAT, 1, 1, 1, topk_);
    }


    status = tecodnnCumSum(handle, 3, a_desc_teco, value, c_desc_teco, scan_value);
    sdaaStreamSynchronize(stream);
    tecodnnDestroyTensorDescriptor(a_desc_teco);
    tecodnnDestroyTensorDescriptor(c_desc_teco);
    if (status != TECODNN_STATUS_SUCCESS) {
        printf("scan %s\n", tecodnnGetErrorString(status));
    }
}
template<typename T>
__global__ void sample(T *scan_value, int64_t *index, uint64_t *result, float random_val, float topp, int topk) {
    if(threadIdx == 0){
        int end = 0;
        for (end = 0; end < topk; end++) {
            
            if (static_cast<float>(scan_value[end]) >= topp) {
                break;
            }
        }
        
        if (end < topk - 1) {
            end += 1;
        } else {
            end = topk;
        }
        
        random_val *= static_cast<float>(scan_value[end - 1]);
        
        for (int i = 0; i < end; i++) {
            if (random_val < static_cast<float>(scan_value[i])) {
                result[0] = static_cast<uint64_t>(index[i]);
                break;
            }
        }
    }

}

__global__ void randomSampleKernel(uint64_t *result, int64_t *index){
    if(threadIdx == 0){
        result[0] = index[0];
    }
}

template <typename T>
void randomSample(void *result,
                    const void *probs,
                    float random_val,
                    float topp,
                    int voc,
                    int topk,
                    float temperature) {
    tecodnnHandle_t handle;
    tecodnnCreate(&handle);
    sdaaStream_t stream;
    sdaaStreamCreate(&stream);
    
    void *workspace;
    sdaaMalloc((void **) &workspace, voc * (sizeof(uint64_t) + 3 * sizeof(T)));
    
    if constexpr (sizeof(T) == 2) {
        int topk_ = ((topk + 31) / 32) * 32;//cumsum要求64B对齐

        char *origin = reinterpret_cast<char *>(workspace);
        half *value = (half *) origin;
        half *scan_value = value + topk_;
        half *destination = scan_value + topk_;

        char *tmp_index = origin + (2 * topk_ + voc) * sizeof(half);
        int64_t *index = (int64_t *) tmp_index;


        tecodnnMemset(handle, value, 0, topk_);
        
        tecodnnSetStream(handle, stream);
        tecodnnStatus_t status = TECODNN_STATUS_SUCCESS;

        topkKernel<half>(probs, reinterpret_cast<void *>(index), reinterpret_cast<void *>(value), topk, voc, status, handle, stream);
        
        if (topp > 0 && topk > 1){
            softmaxKernel<half>(probs, reinterpret_cast<void *>(destination), voc, status, handle, stream);
            memKernel<half><<<1, stream>>>(destination, value, index, topk);

            sdaaDeviceSynchronize();
            cumSumKernel<half>(reinterpret_cast<void *>(value), reinterpret_cast<void *>(scan_value), topk_, status, handle, stream);
            sample<half><<<1, stream>>>(scan_value, index, reinterpret_cast<uint64_t *>(result), random_val, topp, topk);
            sdaaDeviceSynchronize(); 

        }
        else {
            
            randomSampleKernel<<<1, stream>>>(reinterpret_cast<uint64_t *>(result), index);
            sdaaDeviceSynchronize();
            
        }
        
    }
    
    sdaaFree(workspace);
    sdaaStreamDestroy(stream);
    CHECK_TECODNN(tecodnnDestroy(handle));
    
}

extern "C" void randomSample_teco(void *result,
                    const void *probs,
                    float random_val,
                    float topp,
                    int voc,
                    int topk,
                    float temperature, 
                    int byteSize){
    
    if (byteSize == 2){
        
        randomSample<uint16_t>(result,
                    probs,
                    random_val,
                    topp,
                    voc,
                    topk,
                    temperature);
        
    }
    else{
        randomSample<float>(result,
                    probs,
                    random_val,
                    topp,
                    voc,
                    topk,
                    temperature);
    }
}

