#include "kunlun/common_kunlun.h"

template <typename T>
__global__ void ropeKunlunDevice(T *destination, const T *source, 
                const kunlun_size_t *pos_ids, const float *sin_table, const float *cos_table, 
                kunlun_size_t nt,  kunlun_size_t nh, kunlun_size_t dh,
                const kunlun_ptrdiff_t *x_strides, const kunlun_ptrdiff_t *y_strides, 
                XPUStream stream){
    //ndim = 3
    kunlun_size_t other_size = nt * nh;

    int cid = core_id();
    int ncores = core_num();
    if (cid >= ncores) {
        return;
    }
    int thread_id = ncores * cluster_id() + cid;
    int nthreads = ncores * cluster_num();

    int remain = other_size % nthreads;
    int step_easy = (other_size - remain) / nthreads;
    int step_hard = step_easy + 1;
    int step = (thread_id < remain ? step_hard : step_easy);
    int ind_start = (thread_id < remain ? thread_id * step_hard : remain * step_hard + (thread_id - remain) * step_easy);

    constexpr int buf_size = 512;
    __local__ T x_local[buf_size];//昆仑芯不支持bf16到f32的转换，只能默认T=float
    __local__ T y_local[buf_size];
    __local__ float sin_local[buf_size];
    __local__ float cos_local[buf_size];
    __local__ kunlun_size_t pos_local[1];

    __local__ kunlun_ptrdiff_t x_strides_0; 
    __local__ kunlun_ptrdiff_t x_strides_1; 

    __local__ kunlun_ptrdiff_t y_strides_0; 
    __local__ kunlun_ptrdiff_t y_strides_1; 
    GM2LM(x_strides, &x_strides_0, 1 * sizeof(kunlun_ptrdiff_t));
    GM2LM(x_strides + 1, &x_strides_1, 1 * sizeof(kunlun_ptrdiff_t));
    GM2LM(y_strides, &y_strides_0, 1 * sizeof(kunlun_ptrdiff_t));
    GM2LM(y_strides + 1, &y_strides_1, 1 * sizeof(kunlun_ptrdiff_t));
    
    int remain_dh = dh % buf_size;
    int repeat = (dh - remain_dh) / buf_size;

    for(int i = ind_start; i < ind_start + step; i++){
        int ind_i = i;
        int ind_d = 0;
        int ind_s = 0;
        ind_d += (ind_i % nh) * y_strides_1;
        ind_s += (ind_i % nh) * x_strides_1;
        ind_i /= nh;
        ind_d += (ind_i % nt) * y_strides_0;
        ind_s += (ind_i % nt) * x_strides_0;
        GM2LM(pos_ids + (ind_i % nt), pos_local, 1 * sizeof(kunlun_size_t));
        int index = pos_local[0] * dh / 2;
        for(int r = 0; r < repeat + (remain_dh > 0 ? 1 : 0); r++){
            int read_len = (r < repeat ? buf_size : remain_dh);
            int dk = read_len / 2;
            int start_d = ind_s + r * buf_size;
            int start_s = ind_s + r * buf_size;

            GM2LM(source + start_s, x_local, read_len * sizeof(T));
            GM2LM(sin_table + index, sin_local, dk * sizeof(float));
            GM2LM(cos_table + index, cos_local, dk * sizeof(float));
            for(int k = 0; k < dk; k++){
                if constexpr (std::is_same<T, float>::value) {
                    y_local[2 * k] = x_local[2 * k] * cos_local[k] - x_local[2 * k + 1] * sin_local[k];
                    y_local[2 * k + 1] = x_local[2 * k] * sin_local[k] + x_local[2 * k + 1] * cos_local[k];
                }
            }
            mfence();
            LM2GM(y_local, destination + start_d, read_len * sizeof(T));
        }
    }
}

template <typename T>
void ropeKunlun(void *destination, const void *source, 
                const void *pos_ids, const void *sin_table, const void *cos_table, 
                kunlun_size_t nt,  kunlun_size_t nh, kunlun_size_t dh,
                const kunlun_ptrdiff_t *x_strides, const kunlun_ptrdiff_t *y_strides){
    int ndim = 3;
    XPUStream stream;
    int err = xpu_stream_create(&stream);
    char *workspace;
    int ret = 0;
    ret = xpu_malloc((void **)&workspace, ndim * 2 * sizeof(kunlun_ptrdiff_t));
    assert(ret == 0);
    kunlun_ptrdiff_t *xpu_x_strides = (kunlun_ptrdiff_t *)workspace;
    kunlun_ptrdiff_t *xpu_y_strides = xpu_x_strides + ndim;
    ret = xpu_memcpy(xpu_x_strides, x_strides, ndim * sizeof(kunlun_ptrdiff_t), XPU_HOST_TO_DEVICE);
    assert(ret == 0);
    ret = xpu_memcpy(xpu_y_strides, y_strides, ndim * sizeof(kunlun_ptrdiff_t), XPU_HOST_TO_DEVICE);
    assert(ret == 0);

    kunlun_size_t *cpu_pos = (kunlun_size_t *)malloc(ndim * sizeof(kunlun_size_t));
    ret = xpu_memcpy(cpu_pos, (kunlun_size_t *)pos_ids, ndim * sizeof(kunlun_size_t), XPU_DEVICE_TO_HOST);
    
    ropeKunlunDevice<T><<<4, 1, stream>>>((T *)destination, (T *)source, 
                (kunlun_size_t *)pos_ids, (float *)sin_table, (float *)cos_table, 
                nt,  nh, dh,
                xpu_x_strides, xpu_y_strides, stream);
    xpu_wait();
    xpu_free(workspace);            
                     
}
extern "C" void rope_kunlun(void *destination, const void *source, 
                const void *pos_ids, const void *sin_table, const void *cos_table, 
                kunlun_size_t nt,  kunlun_size_t nh, kunlun_size_t dh,
                const kunlun_ptrdiff_t *x_strides, const kunlun_ptrdiff_t *y_strides, int byteSize)
{      
    if (byteSize == 4){
        ropeKunlun<float>(destination, source, 
                pos_ids, sin_table, cos_table, 
                nt,  nh, dh,
                x_strides, y_strides);
    }    
}

