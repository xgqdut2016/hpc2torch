#include "bang.h"
#include "cnrt.h"
const int NRAM_MAX_SIZE = 1024 * 256;
__nram__ char nram_buffer[NRAM_MAX_SIZE];

template <typename T>
__mlu_global__ void RoPE(T *destination, const T *source, 
                        const uint32_t *pos_ids, const float *sin_table, const float *cos_table, 
                        int nt, int nh, int dh, int *x_strides, int *y_strides) {//axis=-1
    const int SRC_MAX_SIZE = NRAM_MAX_SIZE / 32;
    const int maxNum = SRC_MAX_SIZE/sizeof(float);
    
    int othersize = nt * nh;

    int segsize = sizeof(T);
    int srcStrideL = 2 * sizeof(T);
    int destStrideL = 1 * sizeof(T);
    
    int srcStrideW = 1 * sizeof(T);
    int destStrideW = 2 * sizeof(T);

   
    int x_strides_0 = x_strides[0];
    int x_strides_1 = x_strides[1];
    int y_strides_0 = y_strides[0];
    int y_strides_1 = y_strides[1];

    int remainT = othersize % taskDim;
    int stepEasy = (othersize - remainT) / taskDim;
    int stepHard = stepEasy + 1;
    int step = (taskId < remainT ? stepHard : stepEasy);
    int indStart = (taskId < remainT ? taskId * stepHard : (taskId - remainT) * stepEasy + remainT * stepHard);

    char *nram_buffer1;
    uint32_t *srcP;
    if(nt < maxNum){
        nram_buffer1 = nram_buffer + nt * sizeof(uint32_t);
        srcP = (uint32_t *)nram_buffer;//[nt]
        __memcpy(srcP, pos_ids, nt * sizeof(uint32_t), GDRAM2NRAM);
    }
    else{
        nram_buffer1 = nram_buffer;
    }
    int dSize = 2 * maxNum;
    int remain = dh % dSize;
    int repeat = (dh - remain) / dSize;
    int segnum = (repeat > 0 ? dSize : dh);
    int count = (repeat > 0 ? maxNum : dh / 2);


    char *nram_buffer2 = nram_buffer1 + 7 * count * sizeof(float);
    float *sin = (float *)nram_buffer1;
    float *cos = sin + count;
    float *tmpa = cos + count;//[count]
    float *tmpb = tmpa + count;//[count]
    float *tmp_odd = tmpb + count;//[count]
    float *tmp_even = tmp_odd + count;//[count]
    float *tmp_tmp = tmp_even + count;//[count]
    

    T *srca = (T *)nram_buffer2;//[count]
    T *srcb = srca + count;//[3 * count]
    T *src = srcb + 3 * count;//[dSize]
    
    for(int i = indStart; i < indStart + step; i++){
        int ind_i = i;
        int ind_d = 0;
        int ind_s = 0;
        ind_d += (ind_i % nh) * y_strides_1;
        ind_s += (ind_i % nh) * x_strides_1;
        ind_i /= nh;
        ind_d += (ind_i % nt) * y_strides_0;
        ind_s += (ind_i % nt) * x_strides_0;
        int index = (nt < maxNum ? srcP[(ind_i % nt)] * dh / 2 : pos_ids[(ind_i % nt)] * dh / 2);
        for(int r = 0; r < repeat + (remain > 0 ? 1 : 0); r++){
            int read_len = (r < repeat ? dSize : remain);
            int dk = read_len / 2;
            int start_d = ind_d + r * dSize;
            int start_s = ind_s + r * dSize;
            int sin_cos_index = index + r * maxNum; 
            __memcpy(sin, sin_table + sin_cos_index, dk * sizeof(float), GDRAM2NRAM);
            __memcpy(cos, cos_table + sin_cos_index, dk * sizeof(float), GDRAM2NRAM);              
        

            __memcpy(src, source + start_s, read_len * sizeof(T), GDRAM2NRAM);
            __memcpy(srca, src, segsize, NRAM2NRAM, destStrideL, srcStrideL, segnum); 
            __memcpy(srcb, src + 1, segsize, NRAM2NRAM, destStrideL, srcStrideL, segnum);
            
            if constexpr (std::is_same<T, half>::value){
                __bang_half2float(tmpa, srca, dk);
                __bang_half2float(tmpb, srcb, dk);
            }
            else{
                __memcpy(tmpa, srca, dk * sizeof(T), NRAM2NRAM);
                __memcpy(tmpb, srcb, dk * sizeof(T), NRAM2NRAM);
            }

            __bang_mul(tmp_odd, tmpa, cos, dk);
            __bang_mul(tmp_tmp, tmpb, sin, dk);
            __bang_sub(tmp_odd, tmp_odd, tmp_tmp, dk);

            __bang_mul(tmp_even, tmpa, sin, dk);
            __bang_mul(tmp_tmp, tmpb, cos, dk);
            __bang_add(tmp_even, tmp_even, tmp_tmp, dk);

            if constexpr (std::is_same<T, half>::value){
                __bang_float2half_dn(srca, tmp_odd, dk);
                __bang_float2half_dn(srcb, tmp_even, dk);
            }
            else{
                __memcpy(srca, tmp_odd, dk * sizeof(T), NRAM2NRAM);
                __memcpy(srcb, tmp_even, dk * sizeof(T), NRAM2NRAM);
            }
            

            __memcpy(src, srca, segsize, NRAM2NRAM, destStrideW, srcStrideW, segnum);
            __memcpy(src + 1, srcb, segsize, NRAM2NRAM, destStrideW, srcStrideW, segnum);
            __memcpy(destination + start_d, src, read_len * sizeof(T), NRAM2GDRAM);
            
            
        }
    }
    
}
template<typename T>
void RoPEUnion(cnrtQueue_t queue, void *destination, const void *source, 
                        const void *pos_ids, const void *sin_table, const void *cos_table, 
                        int nt, int nh, int dh, int *x_strides, int *y_strides) {
    
    auto pos_ = reinterpret_cast<const uint32_t *>(pos_ids);
    auto sin_ = reinterpret_cast<const float *>(sin_table);
    auto cos_ = reinterpret_cast<const float *>(cos_table);
    auto x = reinterpret_cast<const T *>(source);
    auto y = reinterpret_cast<T *>(destination);

    cnrtDim3_t k_dim;
    cnrtFunctionType_t k_type;

    k_dim.x = 4;
    k_dim.y = 1;
    k_dim.z = 1;
    k_type = CNRT_FUNC_TYPE_UNION1;

    int ndim = 3;
    char *workspace;
    cnrtMalloc((void**)&workspace, 2 * ndim  * sizeof(int));
    int *mlu_x_strides = (int *)workspace;
    int *mlu_y_strides = mlu_x_strides + ndim;
    cnrtMemcpy(mlu_x_strides, x_strides, ndim * sizeof(int), cnrtMemcpyHostToDev);
    cnrtMemcpy(mlu_y_strides, y_strides, ndim * sizeof(int), cnrtMemcpyHostToDev);
    RoPE<T><<<k_dim, k_type, queue>>>(y, x, 
                        pos_, sin_, cos_, 
                        nt, nh, dh, mlu_x_strides, mlu_y_strides);
    cnrtQueueSync(queue);
    cnrtFree(workspace);
}

extern "C" void RoPE_bang(void *destination, const void *source, 
                        const void *pos_ids, const void *sin_table, const void *cos_table, 
                        int nt, int nh, int dh, int *x_strides, int *y_strides, int byteSize){
    cnrtQueue_t queue;
    CNRT_CHECK(cnrtSetDevice(0));
    CNRT_CHECK(cnrtQueueCreate(&queue));
    if (byteSize == 2){
        RoPEUnion<half>(queue, destination, source, pos_ids, sin_table, cos_table, nt, nh, dh, x_strides, y_strides);
    }
    else{
        RoPEUnion<float>(queue, destination, source, pos_ids, sin_table, cos_table, nt, nh, dh, x_strides, y_strides);
    }
    CNRT_CHECK(cnrtQueueDestroy(queue));
}
