#include "bang.h"
#include "cnrt.h"
#include "mlu/common_mlu.h"

const int NRAM_MAX_SIZE = 1024 * 256;
__nram__ char nram_buffer[NRAM_MAX_SIZE];

template<typename T>
__mlu_global__ void causal_softmaxKernel(T *destination, int *strideDest, int *shape, int othersize, int total_seq_len, int dimS, int mask, int ndim) {
    const int SRC_MAX_SIZE = NRAM_MAX_SIZE / 256;
    const int maxNum = SRC_MAX_SIZE / sizeof(T);
    int wSize = 128 / sizeof(T);
    __nram__ T srcMax[2];
    
    if (total_seq_len > maxNum) {
        int offset = (sizeof(T) == 2 ? maxNum : 0);
        char *nram_buffer1 = nram_buffer + wSize * sizeof(float);
        float *destSumFinal = (float *)nram_buffer;

        T *src = (T *) nram_buffer1;        //[maxNum]
        T *destSum = src + maxNum;         //[maxNum + offset]
        T *tmp = destSum + maxNum + offset;     //[maxNum]

        T destOldMax;
        T destNewMax;

        int remain = total_seq_len % maxNum;
        int repeat = (total_seq_len - remain) / maxNum;

        int remainT = othersize % taskDim;
        int stepEasy = (othersize - remainT) / taskDim;
        int stepHard = stepEasy + 1;
        int step = (taskId < remainT ? stepHard : stepEasy);
        int indStart = (taskId < remainT ? taskId * stepHard : (taskId - remainT) * stepEasy + remainT * stepHard);

        for (int i = indStart; i < indStart + step; i++) {

            int indd = 0;
            int indi = i;
            int lastI = indi % shape[ndim - 2];

            for (int j = ndim - 2; j >= 0; --j) {

                indd += (indi % shape[j]) * strideDest[j];
                indi /= shape[j];
            }


            __bang_write_zero(destSum, maxNum + offset);
            if (mask + 1 + lastI < maxNum) {
                __bang_write_value(src, maxNum, -INFINITY);                                   //提前设置负无穷
                __memcpy(src, destination + indd, (mask + 1 + lastI) * sizeof(T), GDRAM2NRAM);//从destination读取对应数据
                __bang_argmax(srcMax, src, maxNum);                                           //获取最大值
                
                __memcpy(destSum + offset, src, (mask + 1 + lastI) * sizeof(T), NRAM2NRAM);//destSum前面(mask + 1 + lastI)为(src - M)，后面部分为0
                __bang_sub_scalar(destSum + offset, destSum + offset, srcMax[0], mask + 1 + lastI);           //destSum前面(mask + 1 + lastI)为(src - M)，后面部分为0
                __bang_active_exp_less_0(destSum + offset, destSum + offset, mask + 1 + lastI);               //destSum前面(mask + 1 + lastI)为exp(src - M)，后面部分为0
                __bang_write_zero(src, maxNum);                                   //重新设置src全部为0
                __memcpy(src, destSum + offset, (mask + 1 + lastI) * sizeof(T), NRAM2NRAM);//src前面(mask + 1 + lastI)为exp(src - M)，后面部分为0

                ComputeSum(destSum, destSumFinal, maxNum);

                float globalSumInv = 1.0 / destSumFinal[0];//下面开始指数变换，写回GDRAM

                __bang_mul_scalar(src, src, globalSumInv, maxNum);

                __memcpy(destination + indd, src, maxNum * sizeof(T), NRAM2GDRAM);
                __bang_write_zero(src, maxNum);
                for (int s = 1; s < repeat; s++) {
                    __memcpy(destination + indd + s * maxNum, src, maxNum * sizeof(T), NRAM2GDRAM);
                }
                if (remain) {
                    __memcpy(destination + indd + repeat * maxNum, src, remain * sizeof(T), NRAM2GDRAM);
                }
            } else {
                int newRemain = (mask + 1 + lastI) % maxNum;
                int nR = (mask + 1 + lastI - newRemain) / maxNum;

                __bang_write_zero(destSum, maxNum + offset);
                __bang_write_zero(destSumFinal, wSize);

                destOldMax = -INFINITY;
                destNewMax = -INFINITY;
                for (int s = 0; s < nR; s++) {

                    __memcpy(src, destination + indd + s * maxNum, maxNum * sizeof(T), GDRAM2NRAM);
                    __bang_argmax(srcMax, src, maxNum);

                    if (destNewMax < srcMax[0]) {
                        destNewMax = srcMax[0];
                    }
                    __bang_sub_scalar(src, src, destNewMax, maxNum);
                    __bang_active_exp_less_0(src, src, maxNum);

                    if (s > 0) {
                        __bang_mul_scalar(destSum + offset, destSum + offset, exp(destOldMax - destNewMax), maxNum);
                    }
                    __bang_add(destSum + offset, destSum + offset, src, maxNum);

                    destOldMax = destNewMax;
                }

                if (newRemain) {
                    //__bang_write_value(src, maxNum, -INFINITY);

                    __memcpy(src, destination + indd + nR * maxNum, newRemain * sizeof(T), GDRAM2NRAM);

                    __bang_argmax(srcMax, src, maxNum);

                    if (destNewMax < srcMax[0]) {
                        destNewMax = srcMax[0];
                    }

                    __bang_write_zero(tmp, maxNum);
                    __memcpy(tmp, src, newRemain * sizeof(T), NRAM2NRAM);

                    __bang_sub_scalar(tmp, tmp, destNewMax, newRemain);
                    __bang_active_exp_less_0(tmp, tmp, newRemain);

                    if (nR > 0) {
                        __bang_mul_scalar(destSum + offset, destSum + offset, exp(destOldMax - destNewMax), maxNum);
                    }
                    __bang_add(destSum + offset, destSum + offset, tmp, maxNum);

                    destOldMax = destNewMax;
                }

                ComputeSum(destSum, destSumFinal, maxNum);

                T globalSumInv = 1.0 / destSumFinal[0];//下面开始指数变换，写回GDRAM

                for (int s = 0; s < nR; s++) {
                    __memcpy(src, destination + indd + s * maxNum, maxNum * sizeof(T), GDRAM2NRAM);

                    __bang_sub_scalar(src, src, destNewMax, maxNum);
                    __bang_active_exp_less_0(src, src, maxNum);
                    __bang_mul_scalar(src, src, globalSumInv, maxNum);

                    __memcpy(destination + indd + s * maxNum, src, maxNum * sizeof(T), NRAM2GDRAM);
                }
                __bang_write_zero(src, maxNum);
                for (int s = nR; s < repeat; s++) {
                    __memcpy(destination + indd + s * maxNum, src, maxNum * sizeof(T), NRAM2GDRAM);
                }
                if (remain) {
                    __memcpy(destination + indd + repeat * maxNum, src, remain * sizeof(T), NRAM2GDRAM);
                }

                if (newRemain) {

                    __memcpy(src, destination + indd + nR * maxNum, newRemain * sizeof(T), GDRAM2NRAM);

                    __bang_sub_scalar(src, src, destNewMax, maxNum);
                    __bang_active_exp_less_0(src, src, maxNum);
                    __bang_mul_scalar(src, src, globalSumInv, maxNum);

                    __memcpy(destination + indd + nR * maxNum, src, newRemain * sizeof(T), NRAM2GDRAM);
                }
            }
        }
    } else {
        int offset = (sizeof(T) == 2 ? dimS : 0);
        char *nram_buffer1 = nram_buffer + wSize * sizeof(float);
        float *destSumFinal = (float *)nram_buffer;

        T *src = (T *) nram_buffer1;      //[dimS]
        T *destSum = src + dimS;         //[dimS + offset]
        

        int remainT = othersize % taskDim;
        int stepEasy = (othersize - remainT) / taskDim;
        int stepHard = stepEasy + 1;
        int step = (taskId < remainT ? stepHard : stepEasy);
        int indStart = (taskId < remainT ? taskId * stepHard : (taskId - remainT) * stepEasy + remainT * stepHard);

        for (int i = indStart; i < indStart + step; i++) {

            int indd = 0;
            int indi = i;


            for (int j = ndim - 2; j >= 0; --j) {

                indd += (indi % shape[j]) * strideDest[j];
                indi /= shape[j];
            }

            __bang_write_value(src, dimS, -INFINITY);
            __bang_write_zero(destSumFinal, wSize);
            int lastI = i % shape[ndim - 2];
            __memcpy(src, destination + indd, (mask + 1 + lastI) * sizeof(T), GDRAM2NRAM);//长度为total_seq_len的向量，只考虑前面mask + 1 + lastI部分的softmax
            __bang_argmax(srcMax, src, dimS);
            __bang_write_zero(destSum, dimS + offset);
            __memcpy(destSum + offset, src, (mask + 1 + lastI) * sizeof(T), NRAM2NRAM);//初始化destSum为0，前面mask + 1 + lastI部分元素和src保持一致
            __bang_sub_scalar(destSum + offset, destSum + offset, srcMax[0], mask + 1 + lastI);//前面mask + 1 + lastI元素减去最大值M，后面的元素还是0
            __bang_active_exp_less_0(destSum + offset, destSum + offset, mask + 1 + lastI);//前面mask + 1 + lastI元素做指数变换，后面的元素还是0
            __memcpy(src, destSum + offset, dimS * sizeof(T), NRAM2NRAM);
            ComputeSum(destSum, destSumFinal, dimS);           
            float globalSumInv = 1.0 / destSumFinal[0];
            __bang_mul_scalar(src, src, globalSumInv, dimS);

            __memcpy(destination + indd, src, total_seq_len * sizeof(T), NRAM2GDRAM);
        }
    }
}

template<typename T>
__mlu_global__ void causal_softmaxKernelLow(T *destination, int stride_b, int stride_i, int othersize, int seq_len, int total_seq_len, int dimS, int mask) {
    const int SRC_MAX_SIZE = NRAM_MAX_SIZE / 256;
    const int maxNum = SRC_MAX_SIZE / sizeof(T);
    int wSize = 128 / sizeof(T);
    __nram__ T srcMax[2];
    int startDim = othersize / seq_len;
    if (total_seq_len > maxNum) {
        int offset = (sizeof(T) == 2 ? maxNum : 0);
        char *nram_buffer1 = nram_buffer + wSize * sizeof(float);
        float *destSumFinal = (float *)nram_buffer;

        T *src = (T *) nram_buffer1;        //[maxNum]
        T *destSum = src + maxNum;         //[maxNum + offset]
        T *tmp = destSum + maxNum + offset;     //[maxNum]

        T destOldMax;
        T destNewMax;

        int remain = total_seq_len % maxNum;
        int repeat = (total_seq_len - remain) / maxNum;

        int remainT = othersize % taskDim;
        int stepEasy = (othersize - remainT) / taskDim;
        int stepHard = stepEasy + 1;
        int step = (taskId < remainT ? stepHard : stepEasy);
        int indStart = (taskId < remainT ? taskId * stepHard : (taskId - remainT) * stepEasy + remainT * stepHard);

        for (int i = indStart; i < indStart + step; i++) {

            int indd = 0;
            int indi = i;
            int lastI = indi % seq_len;

            indd += (indi % seq_len) * stride_i;
            indi /= seq_len;

            indd += (indi % startDim) * stride_b;

            __bang_write_zero(destSum, maxNum + offset);
            if (mask + 1 + lastI < maxNum) {
                __bang_write_value(src, maxNum, -INFINITY);                                   //提前设置负无穷
                __memcpy(src, destination + indd, (mask + 1 + lastI) * sizeof(T), GDRAM2NRAM);//从destination读取对应数据
                __bang_argmax(srcMax, src, maxNum);                                           //获取最大值
                
                __memcpy(destSum + offset, src, (mask + 1 + lastI) * sizeof(T), NRAM2NRAM);//destSum前面(mask + 1 + lastI)为(src - M)，后面部分为0
                __bang_sub_scalar(destSum + offset, destSum + offset, srcMax[0], mask + 1 + lastI);           //destSum前面(mask + 1 + lastI)为(src - M)，后面部分为0
                __bang_active_exp_less_0(destSum + offset, destSum + offset, mask + 1 + lastI);               //destSum前面(mask + 1 + lastI)为exp(src - M)，后面部分为0
                __bang_write_zero(src, maxNum);                                   //重新设置src全部为0
                __memcpy(src, destSum + offset, (mask + 1 + lastI) * sizeof(T), NRAM2NRAM);//src前面(mask + 1 + lastI)为exp(src - M)，后面部分为0

                ComputeSum(destSum, destSumFinal, maxNum);

                float globalSumInv = 1.0 / destSumFinal[0];//下面开始指数变换，写回GDRAM

                __bang_mul_scalar(src, src, globalSumInv, maxNum);

                __memcpy(destination + indd, src, maxNum * sizeof(T), NRAM2GDRAM);
                __bang_write_zero(src, maxNum);
                for (int s = 1; s < repeat; s++) {
                    __memcpy(destination + indd + s * maxNum, src, maxNum * sizeof(T), NRAM2GDRAM);
                }
                if (remain) {
                    __memcpy(destination + indd + repeat * maxNum, src, remain * sizeof(T), NRAM2GDRAM);
                }
            } else {
                int newRemain = (mask + 1 + lastI) % maxNum;
                int nR = (mask + 1 + lastI - newRemain) / maxNum;

                __bang_write_zero(destSum, maxNum + offset);
                __bang_write_zero(destSumFinal, wSize);

                destOldMax = -INFINITY;
                destNewMax = -INFINITY;
                for (int s = 0; s < nR; s++) {

                    __memcpy(src, destination + indd + s * maxNum, maxNum * sizeof(T), GDRAM2NRAM);
                    __bang_argmax(srcMax, src, maxNum);

                    if (destNewMax < srcMax[0]) {
                        destNewMax = srcMax[0];
                    }
                    __bang_sub_scalar(src, src, destNewMax, maxNum);
                    __bang_active_exp_less_0(src, src, maxNum);

                    if (s > 0) {
                        __bang_mul_scalar(destSum + offset, destSum + offset, exp(destOldMax - destNewMax), maxNum);
                    }
                    __bang_add(destSum + offset, destSum + offset, src, maxNum);

                    destOldMax = destNewMax;
                }

                if (newRemain) {
                    //__bang_write_value(src, maxNum, -INFINITY);

                    __memcpy(src, destination + indd + nR * maxNum, newRemain * sizeof(T), GDRAM2NRAM);

                    __bang_argmax(srcMax, src, maxNum);

                    if (destNewMax < srcMax[0]) {
                        destNewMax = srcMax[0];
                    }

                    __bang_write_zero(tmp, maxNum);
                    __memcpy(tmp, src, newRemain * sizeof(T), NRAM2NRAM);

                    __bang_sub_scalar(tmp, tmp, destNewMax, newRemain);
                    __bang_active_exp_less_0(tmp, tmp, newRemain);

                    if (nR > 0) {
                        __bang_mul_scalar(destSum + offset, destSum + offset, exp(destOldMax - destNewMax), maxNum);
                    }
                    __bang_add(destSum + offset, destSum + offset, tmp, maxNum);

                    destOldMax = destNewMax;
                }

                ComputeSum(destSum, destSumFinal, maxNum);

                T globalSumInv = 1.0 / destSumFinal[0];//下面开始指数变换，写回GDRAM

                for (int s = 0; s < nR; s++) {
                    __memcpy(src, destination + indd + s * maxNum, maxNum * sizeof(T), GDRAM2NRAM);

                    __bang_sub_scalar(src, src, destNewMax, maxNum);
                    __bang_active_exp_less_0(src, src, maxNum);
                    __bang_mul_scalar(src, src, globalSumInv, maxNum);

                    __memcpy(destination + indd + s * maxNum, src, maxNum * sizeof(T), NRAM2GDRAM);
                }
                __bang_write_zero(src, maxNum);
                for (int s = nR; s < repeat; s++) {
                    __memcpy(destination + indd + s * maxNum, src, maxNum * sizeof(T), NRAM2GDRAM);
                }
                if (remain) {
                    __memcpy(destination + indd + repeat * maxNum, src, remain * sizeof(T), NRAM2GDRAM);
                }

                if (newRemain) {

                    __memcpy(src, destination + indd + nR * maxNum, newRemain * sizeof(T), GDRAM2NRAM);

                    __bang_sub_scalar(src, src, destNewMax, maxNum);
                    __bang_active_exp_less_0(src, src, maxNum);
                    __bang_mul_scalar(src, src, globalSumInv, maxNum);

                    __memcpy(destination + indd + nR * maxNum, src, newRemain * sizeof(T), NRAM2GDRAM);
                }
            }
        }
    } else {
        int offset = (sizeof(T) == 2 ? dimS : 0);
        char *nram_buffer1 = nram_buffer + wSize * sizeof(float);
        float *destSumFinal = (float *)nram_buffer;

        T *src = (T *) nram_buffer1;      //[dimS]
        T *destSum = src + dimS;         //[dimS + offset]
        

        int remainT = othersize % taskDim;
        int stepEasy = (othersize - remainT) / taskDim;
        int stepHard = stepEasy + 1;
        int step = (taskId < remainT ? stepHard : stepEasy);
        int indStart = (taskId < remainT ? taskId * stepHard : (taskId - remainT) * stepEasy + remainT * stepHard);

        for (int i = indStart; i < indStart + step; i++) {

            int indd = 0;
            int indi = i;


            indd += (indi % seq_len) * stride_i;
            indi /= seq_len;

            indd += (indi % startDim) * stride_b;
            __bang_write_value(src, dimS, -INFINITY);
            __bang_write_zero(destSumFinal, wSize);
            int lastI = i % seq_len;
            __memcpy(src, destination + indd, (mask + 1 + lastI) * sizeof(T), GDRAM2NRAM);//长度为total_seq_len的向量，只考虑前面mask + 1 + lastI部分的softmax
            __bang_argmax(srcMax, src, dimS);
            __bang_write_zero(destSum, dimS + offset);
            __memcpy(destSum + offset, src, (mask + 1 + lastI) * sizeof(T), NRAM2NRAM);//初始化destSum为0，前面mask + 1 + lastI部分元素和src保持一致
            __bang_sub_scalar(destSum + offset, destSum + offset, srcMax[0], mask + 1 + lastI);//前面mask + 1 + lastI元素减去最大值M，后面的元素还是0
            __bang_active_exp_less_0(destSum + offset, destSum + offset, mask + 1 + lastI);//前面mask + 1 + lastI元素做指数变换，后面的元素还是0
            __memcpy(src, destSum + offset, dimS * sizeof(T), NRAM2NRAM);
            ComputeSum(destSum, destSumFinal, dimS);           
            float globalSumInv = 1.0 / destSumFinal[0];
            __bang_mul_scalar(src, src, globalSumInv, dimS);

            __memcpy(destination + indd, src, total_seq_len * sizeof(T), NRAM2GDRAM);
        }
    }
}


template<typename T>
void causal_softmaxUnion(cnrtQueue_t queue, void *destination, int *strideDest, int *shape, int othersize, int total_seq_len, int mask, int ndim) {
    int wSize = 128 / sizeof(T);
    auto y_ = reinterpret_cast<T *>(destination);

    int dimS;
    float mi = log2(total_seq_len);
    if (floor(mi) == mi) {
        dimS = total_seq_len;
    } else {
        dimS = pow(2, floor(mi) + 1);
    }
    if (dimS < wSize) {
        dimS = wSize;
    }

    cnrtDim3_t k_dim;
    cnrtFunctionType_t k_type;

    k_dim.x = 4;
    k_dim.y = 1;
    k_dim.z = 1;
    k_type = CNRT_FUNC_TYPE_UNION1;
    if (ndim == 2){
        int stride_b = 0;
        int stride_i = strideDest[ndim - 2];
        int seq_len = shape[ndim - 2];
        causal_softmaxKernelLow<T><<<k_dim, k_type, queue>>>(y_, stride_b, stride_i, othersize, seq_len, total_seq_len, dimS, mask);
    }
    else if(ndim == 3){
        int stride_b = strideDest[ndim - 3];
        int stride_i = strideDest[ndim - 2];
        int seq_len = shape[ndim - 2];
        causal_softmaxKernelLow<T><<<k_dim, k_type, queue>>>(y_, stride_b, stride_i, othersize, seq_len, total_seq_len, dimS, mask);
    }
    else{
        int *mlu_shape;
        int *mlu_stride;
        CNRT_CHECK(cnrtMalloc((void**)&mlu_shape, ndim * sizeof(int)));
        CNRT_CHECK(cnrtMalloc((void**)&mlu_stride, ndim * sizeof(int)));
        CNRT_CHECK(cnrtMemcpy(mlu_shape, shape, ndim * sizeof(int), cnrtMemcpyHostToDev));
        CNRT_CHECK(cnrtMemcpy(mlu_stride, strideDest, ndim * sizeof(int), cnrtMemcpyHostToDev));
        causal_softmaxKernel<T><<<k_dim, k_type, queue>>>(y_, mlu_stride, mlu_shape, othersize, total_seq_len, dimS, mask, ndim);
        cnrtFree(mlu_shape);
        cnrtFree(mlu_stride);
    }
    cnrtQueueSync(queue);
}

extern "C" void causal_softmax_bang(void *destination, int *strideDest, int *shape, int othersize, int total_seq_len, int mask, int ndim, int byteSize){
    cnrtQueue_t queue;
    CNRT_CHECK(cnrtSetDevice(0));
    CNRT_CHECK(cnrtQueueCreate(&queue));
    if (byteSize == 4){
        causal_softmaxUnion<float>(queue, destination, strideDest, shape, othersize, total_seq_len, mask, ndim);
    }
    else if (byteSize == 2){
        causal_softmaxUnion<half>(queue, destination, strideDest, shape, othersize, total_seq_len, mask, ndim);
    }
    
    CNRT_CHECK(cnrtQueueDestroy(queue));
}
